//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Source/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""SnakeControls"",
            ""id"": ""7a88585a-6597-469f-9e46-70662d7ac2cf"",
            ""actions"": [
                {
                    ""name"": ""DirectionDelta"",
                    ""type"": ""Value"",
                    ""id"": ""a2bc1aae-96b3-4750-9a7e-2c431dce6cd8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""d4d82960-f00f-4662-aecb-6812e219eae9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.3,pressPoint=0.3)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2191056b-b176-4d9a-8006-0eeda1915825"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""9c87fada-d923-4884-ab5c-1d29274d6545"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=100,y=100)"",
                    ""groups"": """",
                    ""action"": ""DirectionDelta"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""88d0b4d6-0655-488a-8b84-065704ef9ba1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d87254a0-7765-448e-8e26-2adf5f5b9cdd"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f24fa006-4635-488b-8b5c-09860344d40a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6e9c3751-b6d3-4e44-8cb0-d0ac3f979f8d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DirectionDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""69b55363-3666-4b46-81fb-884eac029f33"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c60da38-beb9-4ab8-9579-6e8e58a292a1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SnakeControls
        m_SnakeControls = asset.FindActionMap("SnakeControls", throwIfNotFound: true);
        m_SnakeControls_DirectionDelta = m_SnakeControls.FindAction("DirectionDelta", throwIfNotFound: true);
        m_SnakeControls_Acceleration = m_SnakeControls.FindAction("Acceleration", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SnakeControls
    private readonly InputActionMap m_SnakeControls;
    private List<ISnakeControlsActions> m_SnakeControlsActionsCallbackInterfaces = new List<ISnakeControlsActions>();
    private readonly InputAction m_SnakeControls_DirectionDelta;
    private readonly InputAction m_SnakeControls_Acceleration;
    public struct SnakeControlsActions
    {
        private @InputActions m_Wrapper;
        public SnakeControlsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DirectionDelta => m_Wrapper.m_SnakeControls_DirectionDelta;
        public InputAction @Acceleration => m_Wrapper.m_SnakeControls_Acceleration;
        public InputActionMap Get() { return m_Wrapper.m_SnakeControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SnakeControlsActions set) { return set.Get(); }
        public void AddCallbacks(ISnakeControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_SnakeControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SnakeControlsActionsCallbackInterfaces.Add(instance);
            @DirectionDelta.started += instance.OnDirectionDelta;
            @DirectionDelta.performed += instance.OnDirectionDelta;
            @DirectionDelta.canceled += instance.OnDirectionDelta;
            @Acceleration.started += instance.OnAcceleration;
            @Acceleration.performed += instance.OnAcceleration;
            @Acceleration.canceled += instance.OnAcceleration;
        }

        private void UnregisterCallbacks(ISnakeControlsActions instance)
        {
            @DirectionDelta.started -= instance.OnDirectionDelta;
            @DirectionDelta.performed -= instance.OnDirectionDelta;
            @DirectionDelta.canceled -= instance.OnDirectionDelta;
            @Acceleration.started -= instance.OnAcceleration;
            @Acceleration.performed -= instance.OnAcceleration;
            @Acceleration.canceled -= instance.OnAcceleration;
        }

        public void RemoveCallbacks(ISnakeControlsActions instance)
        {
            if (m_Wrapper.m_SnakeControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISnakeControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_SnakeControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SnakeControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SnakeControlsActions @SnakeControls => new SnakeControlsActions(this);
    public interface ISnakeControlsActions
    {
        void OnDirectionDelta(InputAction.CallbackContext context);
        void OnAcceleration(InputAction.CallbackContext context);
    }
}
